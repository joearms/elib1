<? simple_web_server:header() ?>

<body>


  <h1>Indexer</h1>


  <p><a href="./slides.ehtml">Slides</a> or <a
  href="/supported/tagger/html/elib1_indexer.html">read the code</a>
  or <a href="/lib/doc/elib1_indexer.html">the module
  documentation</a>
  or run <a href="./web_query.ehtml"> a web query</a></p>

  <p>This chapter describes how to make a full text indexer for Erlang
  programs. During the years I have collected a large number of Erlang
  modules and keeping track of all the modules is pretty difficult. I
  decided to make a full-text index of all the content.</p>

  <p>Full-text indexing is a pretty complex procedure, we'll need to
  use a variety of complex data structures for the different
  operations involved in building the index, so it provides a good
  example of the use of different Erlang data representation
  techniques.</p>

  <p>We'll start with a bottom up discussion of how a full text index
  works.</p>

  <h2>How does indexing work - the approximate truth?</h2>

  <p>I'm going to assume that our index is contained in a single dets
  file called <b>index.dets</b>. For now on we can omit details of
  how this file is created. The dets value maps keys onto values.
  There are two types of keys in the dets file, strings and integers.</p>

  <p>The strings are assumed to be words that occur in the collection
  of files that we have indexed. The integers are assumed to be file
  numbers.</p>

  <p>The value of a string when we look it up is a list of integers.
  The value of an integer wher we look it up is a filename.</p>

  <p>As an example imagine we have three files, called A,B and C. They
  contain the following:</p>

  <table>
    <tbody><tr><td><b>FileName</b></td><td><b>Contents</b></td></tr>
    <tr><td>A</td><td>this and that</td></tr>
    <tr><td>B</td><td>more than this</td></tr>
    <tr><td>C</td><td>more and more</td></tr>
    <tr><td>D</td><td>more than that</td></tr>
  </tbody></table>

  <p>The dets index for this set of files is as follows:</p>

  <table>
    <tbody><tr><td><b>Key</b></td><td><b>Value</b></td></tr>
    <tr><td>1</td><td>"A"</td></tr>
    <tr><td>2</td><td>"B"</td></tr>
    <tr><td>3</td><td>"C"</td></tr>
    <tr><td>4</td><td>"C"</td></tr>
    <tr><td>"this"</td><td>[1,2]</td></tr>
    <tr><td>"and"</td><td>[1,3]</td></tr>
    <tr><td>"that"</td><td>[1,4]</td></tr>
    <tr><td>"more"</td><td>[2,3,4]</td></tr>
    <tr><td>"that"</td><td>[1,4]</td></tr>
    <tr><td>"than"</td><td>[2,4]</td></tr>
    <tr><td>"this"</td><td>[1,2]</td></tr>
    <tr><td>"and"</td><td>[1,3]</td></tr>
  </tbody></table>

  <p>This is called an <i>inverted index.</i></p>

  <p>Looking up a phrase in an inverted index is easy: Suppose we want
  to find which files contains the words <b>"and that"</b>. The word
  <b>"and"</b> is contained in one of the files in the list files
  <b>[1,3]</b>, <b>"that"</b> is in the list <b>[1,4]</b>. The
  intersection of these two lists is the list <b>[1]</b>, file
  number <b>1</b> is the file with name <b>"A"</b>. Easy.</p>

  <p>Computing the inverted index for a collections of thousands of files
  and hundreds to giga bytes of data is not easy. And the above
  simplified data structures do not work. To make an inverted index
  we have to use some smart representations of the file number list,
  and we have to be smart when computing the index.</p>

  <h2>How does indexing work?</h2>

  <p> The indexing
  program once run will create an index file called
  <b>big_index.dat</b>.  The index file is a dets table.</p>

  <p>The <b>big_content.dat</b> is tuple sequence file of
  <b>{FileName, Md5, CContent}</b> tuples.</p>

  <h2>Tuple sequence files</h2>

  <p>Tuple sequence files are sequential files containing sequences of
  tuples.  each tuple is encoded as a four byte header, containing a
  length (<b>N</b>) followed by a binary of size <b>N</b> build by
  evaluating <b>tuple_to_binary(T)</b>. To write a new tuple to an
  opened file <b>F</b> we evaluate:</p>

  <pre>    write_tuple(F, T) -&gt;
        B = tuple_to_binary(T),
        Size = size(B),
        io:write(F, [&lt;&lt;I:32/integer&gt;&gt;, B]).
  </pre>

  <p>Tuple sequences files can be read and written extremely quickly,
  this is discussed in ...</p>

  <h2>big_index.dat</h2>

  <p>The index that we create is a dets table mapping words onto lists
  of documents. The Key to the table is a word and the value for a
  given key is a list of document numbers.</p>

  <p>Image the word <b>image</b>, when we look up the key <b>image</b>
  in the index file the value will be a list of document numbers
  pointing to the documents that contain the word <b>image</b>, so for
  example we might imagine that there is some function <b>lookup/1</b>
  and that if we call it, it will return a list of document numbers,
  for example:</p>

  <pre>    &gt; elib1_indexer:lookup(big, "image").
    [89,98,313,434,441,447,710,713,902,905,906,923,925,927,928,
    929,931,932,1031,1056,1059,1062,1063,1084,1085,1088,1089,
    1090,1092|...]
  </pre>

  <p>The numbers returned by <b>lookup/1</b> are not document numbers
  but they are pointers into the file <b>big_content.dat</b>, the
  pointers contain the location of the start of a 4 byte length header
  preceding the tuple data which contains the content of the file.</p>

  <p>The code for <b>lookup/1</b> is as follows:</p>

<pre>  lookup(Name, Str) -&gt;
      {ok, result} =
	dets:open_file(result,
		       {file,atom_to_list(Name) ++ "_index.dets"}),
      Bin = list_to_binary(elib1_porter:stem(Str)),
      case dets:lookup(result, Bin) of
	[] -&gt; [];
	[{_,Bin1}] -&gt;
	    elib1_gamma:gamma_to_alist(Bin1)
      end.
  </pre>

  <p>As you can see I have glossed over some of the details of the
  internal representation of the index word and of how the list of
  pointers is stored.</p>

  <p>To start with the key used in the data table is not a string but
  a binary, of the <i>stemmed</i> version of the
  string. <q>Stemming</q> is a process of removing common suffix of a
  word to produce a single base version of the word. So for example,
  the stem of the words lists, listing and listed is the word
  <q>list</q>. We can test the stemming algorithm as follows:</p>

  <pre>    &gt; elib1_porter:stem("lists").
    "list"
    &gt; elib1_porter:stem("listing").
    "list"
    &gt; elib1_porter:stem("listed").
    "list"
  </pre>

  <p>using stemmed words in place of the entire word reduces the size
  of the index and results in nearer matches to a query when the
  precise grammatical form of a word in the index is unknown.</p>

  <p>The next detail of <b>lookup</b> concerns the internal form of
  the file pointer list. What is actually stored in the dets table is
  not a list of integers, but a <q>gamma encoded</q> delta list of
  integers.</p>

  <p>We create this list by calling <b>elib1_gamma:alist_to_gamma(L)</b>
  this returns a binary <b>B</b> which can be decoded by calling
  <b>elib1_gamma:gamma_to_alist(B)</b> which recovers the original
  list. The point about gamma encoding is that the size of
  <b>B</b> is usually a lot smaller than the size of
  <b>term_to_binary(L)</b></p>

  <p>Here's an demonstration of this:</p>

  <p>If we lookup the keyword <b>lists</b>
  we get a list of document numbers. This need 39 bits/document
  to store the data:
  </p>

  <pre>    1&gt; L=elib1_indexer:lookup(big, "lists").
    [1,6,8,12,21,24,26,27,31,32,33,34,35,36,37,38,39,40,41,42,
    43,44,45,46,47,49,50,51,52|...]
    2&gt; length(L).
    7450
    3&gt; size(term_to_binary(L)).
    36657
    4&gt; 8*size(term_to_binary(L))/length(L).
    39.36322147651007
  </pre>

  <p>Now using gamma encoding we can get down to an amazing 1.5
  bits/document:</p>

  <pre>    5&gt;  B1 = elib1_gamma:alist_to_gamma(L).
    &lt;&lt;131,104,3,100,0,5,100,108,105,115,116,97,1,77,0,0,5,116,
    7,4,36,164,100,132,182,37,80,154,34,...&gt;&gt;
    6&gt; erlang:bit_size(B1).
    11320
    7&gt;  erlang:bit_size(B1)/length(L).
    1.5194630872483221
  </pre>


  <h2>How does gamma encoding work?</h2>

  <p><a href="/supported/tagger/html/elib1_gamma.html">read the code</a></p>

  <p>The original list of document numbers was as follows:</p>

  <pre>  [1,6,8,12,21,24,26,27,31,32,33,34,35,36,37,38,39,40,41,42,
  43,44,45,46,47,49,50,51,52|...]
  </pre>

  <p>This is a sorted monotonic list. From this we produce a delta
  list.  The delta list of a monotonically increasing sequence
  consists of the first element of the list followed by the deltas
  (increments) between successive elements in the original list. So for
  example:</p>

  <pre>    &gt; elib1_gamma:dlist(L).
    {dlist,1,
       [5,2,4,9,3,2,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1|...]}
  </pre>

  <p>The delta list consists mostly of small integers.</p>

  <h2>Gamma encoded integers</h2>

  <p>Gamma encoding is a variable length bit encoding that
  can be applied to positive integers.</p>

  <p>The easies way to understand gamma encoded integers is to start by looking
  at rules for decoding a bit string.</p>

  <pre>  Bit Sequence      Means
  "0"               1
  "10X"             2^1 + X (encodes 2,3)
  "110XX"           2^2 + X (encodes 4,5,6,7)
  "1110XXX"         2^3 + X (encodes 8,9,10,11,12,13,14,15)
  "1.....10X.....X" 2^N + X where X is in 0 .. 2^N-1
    N 1's   N bits
  </pre>

  <p>A gamma encoded integer has a (possibly empty) sequence of 1 bits
  followed by a zero, followed by a binary number. The number of bits
  in the binary number is the sam,e as the number of 1 bits that
  precedes the zero.</p>

  <p>Thus to decode "111100101BBBB..." we break the string up in a
  number of parts <b>1111 0 0101 BBBB...</b> the unary encoded number
  "11110" represents a base of 2^4, we then strip off the next four
  bits "0101" (decimal 5) and thus "111100101" is the binary encoding
  of the decimal integer 16+5 (ie 21).</p>

  <p>The Erlang code to do this is:</p>

  <pre>    decode_f(&lt;&lt;2#0:1,B/bits&gt;&gt;)     -&gt; {1,1,B};
    decode_f(&lt;&lt;2#10:2,R:1,B/bits&gt;&gt;) -&gt; {2+R,3,B};
    decode_f(&lt;&lt;2#110:3,R:2,B/bits&gt;&gt;) -&gt; {4+R,5,B};
    decode_f(&lt;&lt;2#1110:4,R:3,B/bits&gt;&gt;) -&gt; {8+R,7,B};
    decode_f(&lt;&lt;2#11110:5,R:4,B/bits&gt;&gt;) -&gt; {16+R,9,B};
    decode_f(&lt;&lt;2#111110:6,R:5,B/bits&gt;&gt;) -&gt; {32+R,11,B};
    decode_f(&lt;&lt;2#1111110:7,R:6,B/bits&gt;&gt;) -&gt; {64+R,13,B};
    decode_f(&lt;&lt;2#11111110:8,R:7,B/bits&gt;&gt;) -&gt; {128+R,15,B};
    ...
  </pre>

  <p>Gamma encoding encodes small gaps in the delta list in very few
  bits, for example the gap of 1 which occurs often if a word is very
  common is encoded in a single bit. Fir common words, which occur in
  almost every document gamma encoding is extremely efficient. For
  less common words the gaps are larger, but in this case there are
  fewer elements in the page number list so compression is less important.
  We need to aggressively compress the long delta lists which will contain many
  small integers, but the short delta lists need not be aggressively compressed.
  Using a fixed length encoding we are stuck with 40 bits  per integer
  </p>

  <pre>    11&gt; indexer:make_index([big]).
listing: files from:"/home/ejoearm"
listing: Found 15427 files
listing took 182250 ms.
Packing data ...
pack: 15427 files (201633745 bytes) read
pack: 10301 files (41895743 bytes) written
pack: compression = 0.20778140583561547
pack took 160156 ms.
keywords: building word table
indexing: 215830 words loaded
keywords: analysing files files (can take a while) .....100 ....200 ....300 ....400 ....500 ....600 ....700 ....800 ....900 ....1000 ....1100 ....1200 ....1300 ....1400 ....1500 ....1600 ....1700 ....1800 ....1900 ....2000 ....2100 ....2200 ....2300 ....2400 ....2500 ....2600 ....2700 ....2800 ....2900 ....3000 ....3100 ....3200 ....3300 ....3400 ....3500 ....3600 ....3700 ....3800 ....3900 ....4000 ....4100 ....4200 ....4300 ....4400 ....4500 ....4600 ....4700 ....4800 ....4900 ....5000 ....5100 ....5200 ....5300 ....5400 ....5500 ....5600 ....5700 ....5800 ....5900 ....6000 ....6100 ....6200 ....6300 ....6400 ....6500 ....6600 ....6700 ....6800 ....6900 ....7000 ....7100 ....7200 ....7300 ....7400 ....7500 ....7600 ....7700 ....7800 ....7900 ....8000 ....8100 ....8200 ....8300 ....8400 ....8500 ....8600 ....8700 ....8800 ....8900 ....9000 ....9100 ....9200 ....9300 ....9400 ....9500 ....9600 ....9700 ....9800 ....9900 ....10000 ....10100 ....10200 ....10300
keywords: inverting word table
extract keywords took 99634 ms.
pack index: sorting
pack index: sorting done
pack index: outputting index
packing tindex took 41285 ms.
lookup:"dict"
dict 627 hits
lookup:"sort"
sort 1362 hits
[31116975,31043726,33865542,10138478,37282314,9251096,24991963,9702306,
 9621033,37874255,5946056,34816683,21059019,10147544,37141735,18892729,
 16794676,31120350,29104375,15879645,4128910,20185174,11308171,28641886,
 8008561,30255888,22348162,24185050,9757106,37720552,28689440,11148627,
 16469923,28673405,22648384,16480472,9090978,27532652,5477248,35432738,
 31513878,30631092,6369331,4420996,27141722,18045986,41617974,16432375,
 30997651,29133919,24301826,30671418,15828972,12349193,11324436,37299790,
 30884589,10259918,8917868,30279189,11880517,30948902,30561478,30865389,
 8030775,21825568,13191357,7997747,6510524,21297706,41161770,30629713,
 20685701,6213737,5422496,30945106,28663916,9818604,35424885,26572098,9037422,
 36410017,8160798,5081378,29062379,30426204,30297270,22864825,15035159,
 18873338,30951910,30993178,9984277,4867941,34958600,31350338,17767388,
 4774206,12856837,9265322,35519647,31631383,33930410,29157767,11835896,
 8968923,5821999,34907565,24104130,14359281,29244422,703141,503117,30253668,
 29107690,27883092,10049181,11474403,9283770,29092025,5069470,20081254,
 24163476,26948831,8023336,41449746,31616214,26682627,11760825,24166984,
 23773687,35600605,27257213,30619207,9869499,8863085,22676119,29242102,
 5323460,13193767,4943497,37588879,37160454,30264056,9241799,9033696,10895477,
 10264950,34549343,31551485,29249639,38267948,25374455,13171394,20969360,
 345102,8564968,212816,30946783,30888244,16370625,36965207,34411988,30947822,
 5405412,31258594,30727325,17802529,34926348,5030125,4478822,30988515,
 25387758,10165660,11439635,31017590,28545030,5518365,24503446,37130570,
 30994570,18881535,35583999,30949796,18102146,9858374,9686855,34432049,
 21566439,13157958,9429093,31349430,31063244,29304149,6390439,34339000,
 31077430,30370690,4149342,31346857,30936673,29150845,31516067,29097706,
 6347593,34390578,18138706,18729970,30553250,3742350,24292605]
query took 10 ms.
total time to buid index took 483338 ms.
  </pre>
 </body>

